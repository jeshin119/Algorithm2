***************************************************
1.
백준 19942 다이어트
소요시간 : 41분. 17:15 ~ 17:56

틀린점
1. 답없으면 -1 빼먹음
2. 8%에서 틀림..왜? list는 사전순으로 빠른것을 사용.
-> 완탐이므로 모든것을 다 포함할 수 있어서 나중으로 갈수록 비용은 항상 최소비용보다 크다
때문에 list를 비용을 기준으로 갱신시킨다면 n개의 정점이 모두 들어가게된다.
-> 비용이 같은 경우에만 list를 min으로 갱신시켜서 해결.

참고
1. 사전순으로 가장 작은것을 출력-> sort?-> 배열을 저장해놔야 함-> map을 사용할 수 있다.

map<int, vector<vector<int>>> ret_v;
if(ret >= sum){
            ret = sum;
            ret_v[ret].push_back(v); 
        }
===================================================

***************************************************
2.
백준 1285 동전뒤집기
못풀음.

1. 4중 for문을 사용해야? -> 시간복잡도가 2^20 * 2^20 * 4000임 그러면.
-> 시간복잡도를 그래서 어떻게 줄일 수 있는건지? 그걸 모르겠음.

참고
1. 시간복잡도를 줄여야하는데-> 최적해가 존재하나?(그리디)
2. 비트마스킹이란 불리언배열을 숫자로 표현할수있지않을까 이다.
3. 그래서 뒤집는거 ~로 할 수있다.
4. ~n = -(n+1)이다.
===================================================

***************************************************
3.
백준 17471 게리멘더링
틀림. 19:18~ 

1. 선택된 정점들이 서로 연결되어있다는 것을 어떻게 확인할수있지?
2. 최하위 켜져있는비트?
3. 그다음 켜져있는 비트?
4. 비트 켜져있으면 끄기?

참고
1. 최하위 켜져있는 비트 찾기: idx = (S & -S)

2. 비트 켜져있으면 끄고 꺼져있으면 켜기: S ^= (1<<idx)

3. 두가지 종류의 연결된 컴포넌트들을 모두 검사해야하는데 나는 하나만 검사하려했음.

4. n 개의 모든 경우의 수를 탐색할때 코드가 for(int i=1;i<(1<<n);i++)인 이유?
: n개의 비트를 켜고 끌건데 0~n-1까지가 n개이므로 i는 0또는 1부터 시작하고 i<(1<<n)까지 이다.

5. 연결되있다는 걸 확인하려면 dfs나 bfs를 사용하고 각 정점의 visited가 값이 있는지 확인하면 된다.

6. 2%에서 틀린이유
: 그래프 순회는 두가지를 체크한다. 값, 방문.
: 연결되어있다는 것을 확인하려고 dfs를 사용하는데 인접노드를 방문할때 그 노드가 같은 구역인지 검사하는 코드가 없었다. 
    while(st.size()){
        int here=st.top();
        st.pop();
        for(auto there:adj[here]){
            if (visited[there])
                continue;
            st.push(there);
            visited[there]=val;
        }
    }
위 코드는 잘못된 코드인데 방문했는지만 체크하고 같은 구역인지 체크하는 코드가 없어서 안됐던 것.
===================================================